name: Go Release

on:
  push:
    tags:
      # Trigger on tags like v1.0.0, v1.2.3-beta, etc.
      - 'v*'

jobs:
  # The build job runs in parallel for each OS/ARCH combination
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Define the runners and target Go environment variables
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            asset_ext: tar.gz
            # The final archive name will look like: myapp_linux_amd64.tar.gz
          - os: windows-latest
            goos: windows
            goarch: amd64
            asset_ext: zip
          - os: macos-latest
            goos: darwin
            goarch: amd64
            asset_ext: tar.gz
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Get Binary Name
        id: binary
        run: |
          # Use the repository name as the binary name (e.g., repo 'my-app' -> binary 'my-app')
          BIN_NAME="${{ github.event.repository.name }}"
          echo "name=$BIN_NAME" >> $GITHUB_OUTPUT

      - name: Build Binary
        run: |
          # Set GOOS and GOARCH for cross-compilation
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ steps.binary.outputs.name }}
        
        # NOTE: If your main package is in a subdirectory (e.g., ./cmd/myapp),
        # use: go build -o ${{ steps.binary.outputs.name }} ./cmd/myapp
        
      - name: Package Binary
        run: |
          ASSET_FILE="${{ steps.binary.outputs.name }}_${{ matrix.goos }}_${{ matrix.goarch }}.${{ matrix.asset_ext }}"
          
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Windows: use 7z to create a zip file
            7z a "$ASSET_FILE" "${{ steps.binary.outputs.name }}.exe"
          else
            # Linux/macOS: use tar to create a tar.gz file
            tar -czvf "$ASSET_FILE" "${{ steps.binary.outputs.name }}"
          fi
          
          echo "asset_file=$ASSET_FILE" >> $GITHUB_OUTPUT
        id: package

      - name: Upload Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_file }}
          path: ${{ steps.package.outputs.asset_file }}

  # The release job depends on the build job to finish and runs only once
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    # Required to create a release and upload assets
    permissions:
      contents: write 
    
    steps:
      - name: Download all assets from build jobs
        uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Automatically uses the pushed tag (e.g., v1.0.0)
          tag_name: ${{ github.ref }}
          # Creates release notes from commits between the last release and the new tag
          generate_release_notes: true 
          # Finds all files in the assets directory and uploads them
          files: assets/**/*