name: 02 - Release

on:
  push:
    branches:
      - main

jobs:
  build_assets:
    runs-on: ${{ matrix.runner_os }} # <-- Changed to runner_os
    strategy:
      matrix:
        # ðŸŸ¢ CORRECTION: Use a map (key: value) structure for matrix inputs
        include:
          - runner_os: ubuntu-latest
            goos: linux
            goarch: amd64
            asset_ext: tar.gz
          - runner_os: windows-latest
            goos: windows
            goarch: amd64
            asset_ext: zip
          - runner_os: macos-latest
            goos: darwin
            goarch: amd64
            asset_ext: tar.gz
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Prepare Variables
        id: vars
        run: |
          # Use the matrix variables directly (no complex parsing needed now!)
          BIN_NAME="${{ github.event.repository.name }}"
          
          echo "goos=${{ matrix.goos }}" >> $GITHUB_OUTPUT
          echo "goarch=${{ matrix.goarch }}" >> $GITHUB_OUTPUT
          echo "ext=${{ matrix.asset_ext }}" >> $GITHUB_OUTPUT
          echo "bin_name=$BIN_NAME" >> $GITHUB_OUTPUT
        shell: bash
          
      - name: Build Binary
        run: |
          env GOOS=${{ steps.vars.outputs.goos }} GOARCH=${{ steps.vars.outputs.goarch }} go build -o ${{ steps.vars.outputs.bin_name }}
        
      - name: Package Binary
        if: runner.os == 'ubuntu-latest' || runner.os == 'macos-latest'
        id: package
        run: |
          ASSET_FILE="${{ steps.vars.outputs.bin_name }}_${{ steps.vars.outputs.goos }}_${{ steps.vars.outputs.goarch }}.${{ steps.vars.outputs.ext }}"
          # Linux/macOS: use tar to create a tar.gz file
          tar -czvf "$ASSET_FILE" "${{ steps.vars.outputs.bin_name }}"
          
          echo "asset_file=$ASSET_FILE" >> $GITHUB_OUTPUT
      - name: Package Binary (windows)
        if: runner.os == 'windows-latest'
        id: package-windows
        run: |
          ASSET_FILE="${{ steps.vars.outputs.bin_name }}_${{ steps.vars.outputs.goos }}_${{ steps.vars.outputs.goarch }}.${{ steps.vars.outputs.ext }}"
          7z a "$ASSET_FILE" "${{ steps.vars.outputs.bin_name }}.exe"
          echo "asset_file=$ASSET_FILE" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        id: upload
        if: runner.os == 'ubuntu-latest' || runner.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_file }}
          path: ${{ steps.package.outputs.asset_file }}
      - name: Upload Artifact Windows
        id: upload-windows
        if: runner.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package-windows.outputs.asset_file }}
          path: ${{ steps.package-windows.outputs.asset_file }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_assets
    permissions:
      contents: write 
      actions: write
    outputs:
      new_tag: ${{ steps.tagger.outputs.new_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Calculate and Create Tag
        id: tagger
        uses: anothrNick/github-tag-action@v1 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: v
          DRY_RUN: true
          DEFAULT_BUMP: patch
      - name: Download all assets
        uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tagger.outputs.new_tag }}
          generate_release_notes: true 
          files: assets/**/*