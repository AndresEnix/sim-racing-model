name: 02 - Release

on:
  # This workflow is only triggered by the '01 - Build and Tag' workflow
  workflow_dispatch:
    inputs:
      tag:
        description: 'The tag name (e.g., v1.0.0) generated by the tagging workflow.'
        required: true
        type: string
        
jobs:
  build_assets:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Define your cross-compilation targets
          - os: ubuntu-latest; goos: linux; goarch: amd64; asset_ext: tar.gz
          - os: windows-latest; goos: windows; goarch: amd64; asset_ext: zip
          - os: macos-latest; goos: darwin; goarch: amd64; asset_ext: tar.gz
          
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Prepare Variables
        id: vars
        run: |
          # Parse matrix variables since they are semicolon-separated strings
          OS=$(echo "${{ matrix.include }}" | cut -d';' -f1 | xargs)
          GOOS=$(echo "${{ matrix.include }}" | cut -d';' -f2 | cut -d':' -f2 | xargs)
          GOARCH=$(echo "${{ matrix.include }}" | cut -d';' -f3 | cut -d':' -f2 | xargs)
          EXT=$(echo "${{ matrix.include }}" | cut -d';' -f4 | cut -d':' -f2 | xargs)
          BIN_NAME="${{ github.event.repository.name }}"
          
          echo "os=$OS" >> $GITHUB_OUTPUT
          echo "goos=$GOOS" >> $GITHUB_OUTPUT
          echo "goarch=$GOARCH" >> $GITHUB_OUTPUT
          echo "ext=$EXT" >> $GITHUB_OUTPUT
          echo "bin_name=$BIN_NAME" >> $GITHUB_OUTPUT
          
      - name: Build Binary
        run: |
          # Use the variables set in the previous step
          env GOOS=${{ steps.vars.outputs.goos }} GOARCH=${{ steps.vars.outputs.goarch }} go build -o ${{ steps.vars.outputs.bin_name }}
        
      - name: Package Binary
        id: package
        run: |
          ASSET_FILE="${{ steps.vars.outputs.bin_name }}_${{ steps.vars.outputs.goos }}_${{ steps.vars.outputs.goarch }}.${{ steps.vars.outputs.ext }}"
          
          if [ "${{ steps.vars.outputs.os }}" == "windows-latest" ]; then
            7z a "$ASSET_FILE" "${{ steps.vars.outputs.bin_name }}.exe"
          else
            tar -czvf "$ASSET_FILE" "${{ steps.vars.outputs.bin_name }}"
          fi
          
          echo "asset_file=$ASSET_FILE" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.asset_file }}
          path: ${{ steps.package.outputs.asset_file }}

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_assets
    permissions:
      contents: write # Needed to create the final release and upload assets
      
    steps:
      - name: Download all assets
        uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag passed from the first workflow via input
          tag_name: ${{ github.event.client_payload.tag }}
          # Creates release notes from commits between the last release and the new tag
          generate_release_notes: true 
          files: assets/**/*